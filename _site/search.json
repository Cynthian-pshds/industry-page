[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "生产制造 | Production Industry",
    "section": "",
    "text": "本网站只有帖子，没有文档。  \n\n\n\n\n\n\n\n\n   \n     \n     \n       排序方式\n       默认\n         \n          标题\n        \n         \n          日期 - 日期升序\n        \n         \n          日期 - 日期降序\n        \n         \n          作者\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n我的建站方案｜My Site Setup\n\n\nAlgolia + Astro + Cloudflare + Docusaurus + GitHub + Namesilo + Quarto\n\n\n\n操作经验\n\n\n\n不需要学过任何语言的代码\n\n\n\n\n\n2024 年 7 月 28 日\n\n\n刘景山\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter + Stata 配置方法\n\n\nVS Code 或 JupyterLab Desktop\n\n\n\n操作经验\n\n\nJupyter\n\n\nStata\n\n\n\n对文科生友好\n\n\n\n\n\n2024 年 4 月 28 日\n\n\n刘景山\n\n\n\n\n\n\n无匹配项"
  },
  {
    "objectID": "posts/jupyter-stata/index.html",
    "href": "posts/jupyter-stata/index.html",
    "title": "Jupyter + Stata 配置方法",
    "section": "",
    "text": "本经验不包含安装 Stata\n\n\n\n请检查确认你已经成功安装 Stata\n\n\n\n\n\n\n\n\n跳跃提示\n\n\n\n如果你已经安装了主流 Python 环境管理器（例如 Anaconda / Miniconda / Mambaforge / Miniforge / Micromamba），请跳过 小节 2.1 ，直接从 小节 2.2 开始。\n如果你已经安装了 Jupyter 软件包，请跳过 小节 2.2 ，直接从 小节 2.3 开始。\n以下章节可能多次涉及到类似这样的「跳过」，不再说明，请视自身情况灵活跳跃。\n\n\n\n\n\n\n\n\n请检查自身操作系统\n\n\n\n再次强调，本经验对 64 位版 Windows 10 用户适用。\nWindows 其他版本的用户可遵照操作，遇见问题再另外解决。\n其他操作系统的用户可参照操作，并参考 小节 5 列出的网址。"
  },
  {
    "objectID": "posts/jupyter-stata/index.html#前言",
    "href": "posts/jupyter-stata/index.html#前言",
    "title": "Jupyter + Stata 配置方法",
    "section": "",
    "text": "本经验不包含安装 Stata\n\n\n\n请检查确认你已经成功安装 Stata\n\n\n\n\n\n\n\n\n跳跃提示\n\n\n\n如果你已经安装了主流 Python 环境管理器（例如 Anaconda / Miniconda / Mambaforge / Miniforge / Micromamba），请跳过 小节 2.1 ，直接从 小节 2.2 开始。\n如果你已经安装了 Jupyter 软件包，请跳过 小节 2.2 ，直接从 小节 2.3 开始。\n以下章节可能多次涉及到类似这样的「跳过」，不再说明，请视自身情况灵活跳跃。\n\n\n\n\n\n\n\n\n请检查自身操作系统\n\n\n\n再次强调，本经验对 64 位版 Windows 10 用户适用。\nWindows 其他版本的用户可遵照操作，遇见问题再另外解决。\n其他操作系统的用户可参照操作，并参考 小节 5 列出的网址。"
  },
  {
    "objectID": "posts/jupyter-stata/index.html#sec-jupyter_env",
    "href": "posts/jupyter-stata/index.html#sec-jupyter_env",
    "title": "Jupyter + Stata 配置方法",
    "section": "2 配 Jupyter 环境",
    "text": "2 配 Jupyter 环境\n\n2.1 配 Python 环境\nAnaconda 是商业软件，虽然还没有对个人收费，但已经宣布对企业收费。\nMiniconda 也是 Anaconda 的产品，虽然现在不对任何人收费，但以后的事没人知道。\n虽然 Anaconda 对新手友好，但为了规避将来的法律风险——同时也为了你可怜的 C 盘剩余空间考虑——我还是强烈建议你选择 Miniforge。\n\n2.1.1 EXE 下载安装\n以下两个地址都可以下载到最新正式版 exe 格式文件，下载后点开安装就可以。原文\nconda-forge 官网下载地址\nGitHub 仓库下载地址\n\n\n\n\n\n\n全英文路径和 Windows Username 有关\n\n\n\n\n\n如果你的 Windows 用户名含有英文 26 个拉丁字母以外的字符，这会导致安装路径不是纯英文的，从而安装失败。这在可预见的将来都没有解决方法，你只能换个 Windows 用户名了。 详见 此 Issue\n\n\n\n\n\n2.1.2 环境变量\n也许你刚才在安装 exe 时出于安全考虑而没有勾选自动添加环境变量。\nMiniforge Prompt 本身并不需要设定环境变量。现在可以跳到 小节 2.1.3\n\n\n\n\n\n\n非必需操作（点击展开）\n\n\n\n\n\n如果你希望使用 cmd 或者 Powershell 之类，那么按以下操作：\n\n打开 Windows 高级系统设置\n点击「高级」选项卡\n点开「环境变量」\n单击「系统变量」当中的「Path」\\(\\Rightarrow\\) 单击「编辑」进入「编辑环境变量」窗口\n单击「新建」来创建路径，通常安装 miniforge 的文件夹默认在 C 盘，是 C:\\\\miniforge3，那么你要新建的的三个路径就是\n\nC:\\miniforge3  \nC:\\miniforge3\\Scripts  \nC:\\miniforge3\\Library\\bin\n\n\n\n\n\n2.1.3 配虚拟环境\n\n\n\n\n\n\n用自己原有的环境也可以\n\n\n\n并不一定必须要按照下面操作创建一个新环境单独给 stata 用。\n用你自己已经熟悉习惯了的虚拟环境也可以，只要不是 base 环境就行。\n\n\n打开 Miniforge Prompt，输入以下代码按 Enter，就创建了你需要的环境。xxx 是你给它起的名字，yyy 是给它安排的 python 版本号。-n 是 -name 的缩写，代表用后面跟着的单词命名。\nmamba create -n xxx python=yyy\n例如，假设我要创建一个名为jupyter_stata的环境，python 版本号为3.11.9\nmamba create -n jupyter_stata python=3.11.9\n接着激活这个环境\nmamba activate jupyter_stata\n如果无效，可考虑用 conda 代替操作（conda 和 mamba 互换通常是可行的，但是使用 conda 默认通道下载某个软件包代表为此后使用行为承担商业法律责任，除非指定使用 conda-forge 通道）\nconda activate jupyter_stata\n如果要退出环境，由于此时是第一次激活环境，以下两句命令有可能出现某一种失效，如果无效则可以考虑两种都试试。第二次激活及以后就不再会失效。\nmamba deactivate\nmamba deactivate jupyter_stata\n\n\n\n2.2 安装 Jupyter 软件包\n激活刚才你创建的环境，接下来的所有环节，除 cmd 操作外，都在这个环境中完成。\n\n2.2.1 安装 Jupyter\nJupyterLab 是 Jupyter Notebook 的新一代升级版，Jupyter Notebook 未来计划将放弃更新维护。所以你可以不再安装 Notebook，直接安装 Lab\nmamba install jupyterlab\n\n\n2.2.2 检查\njupyter lab\n如果此时在浏览器打开了 Lab 应用，说明安装成功且运行正常。\n\n\n\n2.3 配 Jupyter 内核\n\n2.3.1 安装内核\n下载安装 nbstata 软件包\npip install nbstata\n用 nbstata 软件包向 jupyer 中安装 nbstata 内核\npython -m nbstata.install\n如果以后要更新，直接 upgrade\npip install nbstata --upgrade\n而且不需要再重新 python -m nbstata.install\n\n\n2.3.2 设置内核\n接下来，你需要手动修改一张配置文件。\n在你 C 盘的用户名文件夹底下找到 .config\\nbstata\\nbstata.conf 文件。\n假设你的 Windows 用户名叫做 xiaoming，那么这个路径就是 C:\\Users\\xiaoming\\.config\\nbstata\\找到后打开，\n（随便用什么软件打开，简朴到 Windows 自带的记事本可以，花哨到 Neovim 也可以）\n根据你自己的情况修改这些值：（这张表别用手机看）\n\n\n\n\n\n\n\n\n\n变量名\n解释\n怎么填\n备注\n\n\n\n\nstata_dir\n你的 Stata安装的文件夹在哪\n从Windows资源管理器地址栏复制就可以\n\n\n\nedition\nStata 有三套版本你装的是哪一版\nbe se mp 三选一\n\n\n\nsplash\n要不要在 Jupyter 的输出当中也显示启动报告\nTrue 或 False\nStata 在启动时通常在输出窗口报告软件当前版本、功能状态、购买凭证等\n\n\ngraph_format\nStata 输出图表时存为什么格式\n四选一 \\(\\Downarrow\\)png pdf svg pystata pystata 的意思是和 pystata 的设置保持一致\n虽然你现在可能不知道什么是 pystata（我也不知道）但以后可能用得上\n\n\ngraph_widthgraph_height\n生成图表的横向尺寸生成图表的纵向尺寸\n如果不写单位，就默认是 in（inches 英寸）单位还可以写cm（厘米）px（逻辑像素）\n只要你填了有（填的有）数字，Stata 代码的 xsize 和 ysize 数值就被覆盖，不起作用如果不想覆盖它们，就填 default\n\n\necho\n想必你知道用 Jupyter 跑 Python 没有回声那 Jupyter 里的 Stata 怎么办\n三选一 \\(\\Downarrow\\)True 一切命令都有回声False cell 仅一行命令时不回声；其他 cell 有回声None 完全没有回声\n想必你已经知道 Stata 有个对用户很友好的默认设定，就是会在输出窗口先显示你给的输入，再显示给你的输出这个功能被叫作「回声」\n\n\nmissing\n缺失值用什么表示\n字符串本身即可如果要和 Pandas 保持一致，就填 pandas\n原则上不建议修改，默认的. 就是 Stata 唯一接受的形式\n\n\n\n以我自己的为例，最终效果大概会像这样\n[nbstata]\nstata_dir = D:/Program Files/Stata18\nedition = mp\nsplash = False\ngraph_format = png\ngraph_width = 5.5in\ngraph_height = 4in\necho = False\nmissing = .\n——莫忘了 Ctrl + S 保存。"
  },
  {
    "objectID": "posts/jupyter-stata/index.html#sec-jupyterlab",
    "href": "posts/jupyter-stata/index.html#sec-jupyterlab",
    "title": "Jupyter + Stata 配置方法",
    "section": "3 JupyterLab 方案",
    "text": "3 JupyterLab 方案\n虽然在 VS Code 丰富的社区扩展生态和灵活的语法高亮前，原生 Jupyter 已经没有多少吸引力（而且 Jupyter 受财力限制，目前没有，未来也不太可能学微软砸钱给 GitHub Copilot 教育优惠的免费 LLM 辅助），但考虑到读者朋友多来自社科专业，大概率是 Jupyter 原住民，而且 VS Code 由于可自定义的设置太多，常常难以复现，所以还是介绍一下原生 Jupyter 的配置。\n虽然 JupyterLab Desktop 因为基于 Electron 开发而受到广大程序员朋友嘲笑，但我仍然推荐。它安装、卸载、浏览、检修扩展都是直接在应用内部点鼠标就可以的，不需要键盘敲命令行。它不在浏览器里显示，可以轻松区分 Ctrl + Tab 和 Alt + Tab 的作用，与浏览器实现分类正确的两种切换。\n如果你赞赏以上叙述，决定不嘲笑我，请从 小节 3.2 继续。\n\n3.1 JupyterLab Web\n你刚才已经在 小节 2.2.2 打开了，启动页面会有「nbstata」的内核按钮，与 python 内核一起出现，并列显示。这就可以直接用——从最简洁的实现方法来说，本经验到这里已经可以结束了。如果还需要将英文界面切换成中文，可参考 小节 3.2.3.1 的方法。\n\n\n3.2 JupyterLab Desktop\n\n3.2.1 配 Node.js 环境\nJupyterLab Desktop 因为基于 Electron 开发，需要靠 Node.js 实现某些后台功能。\n直接安装 Node.js 难以切换版本（文科社科普遍就业困难，谁知道你以后会不会改行改到被迫用某个低版本 Node.js 在甲方提供的祖传代码上开发），所以建议如下用 NVM 作管理器安装 Node.js\n\n3.2.1.1 安装 NVM\nnvm 本身是个 Unix 应用，只能在 Linux 等类 Unix 操作系统（例如 Android iOS macOS）运行，Windows 享受不到。\n好在 Corey Butler 开发了 NVM for Windows 作为使用上的代替。\n\n\n\n\n\n\n卸载干净\n\n\n\n\n\n我假定你没有在自己电脑上安装过 Node.js 或 npm\n如果有，卸载后可以在 cmd 用 where node 帮助删除残余文件夹\n同时要删除有关的环境变量。\n\n\n\n在 这个地址 找到「Latest」版本底下的「Assets」，下载 exe 文件。\n\n\n\n\n\n\n安装过程中，设路径时\n\n\n\nNode.js Symlink 的文件夹路径要设为尚不存在的文件夹。\n\n\n装完以后按 Win + R，输入 powershell 按 Ctrl + Shift + Enter，弹出以管理员身份运行的 Window Powershell 窗口。\n输入 nvm -v，如果返回了当前 nvm 的版本号，就说明安装成功了。\n不要关闭这个窗口。\n\n\n3.2.1.2 在 NVM 中装配 Node.js\n查看可安装的 Node JS 版本\nnvm list available\n此时会返回与以下类似的输出。\n\n\n\n\n\n\n点击展开\n\n\n\n\n\n\n|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |\n|--------------|--------------|--------------|--------------|\n|    23.1.0    |   22.11.0    |   0.12.18    |   0.11.16    |\n|    23.0.0    |   20.18.0    |   0.12.17    |   0.11.15    |\n|   22.10.0    |   20.17.0    |   0.12.16    |   0.11.14    |\n|    22.9.0    |   20.16.0    |   0.12.15    |   0.11.13    |\n|    22.8.0    |   20.15.1    |   0.12.14    |   0.11.12    |\n|    22.7.0    |   20.15.0    |   0.12.13    |   0.11.11    |\n|    22.6.0    |   20.14.0    |   0.12.12    |   0.11.10    |\n|    22.5.1    |   20.13.1    |   0.12.11    |    0.11.9    |\n|    22.5.0    |   20.13.0    |   0.12.10    |    0.11.8    |\n|    22.4.1    |   20.12.2    |    0.12.9    |    0.11.7    |\n|    22.4.0    |   20.12.1    |    0.12.8    |    0.11.6    |\n|    22.3.0    |   20.12.0    |    0.12.7    |    0.11.5    |\n|    22.2.0    |   20.11.1    |    0.12.6    |    0.11.4    |\n|    22.1.0    |   20.11.0    |    0.12.5    |    0.11.3    |\n|    22.0.0    |   20.10.0    |    0.12.4    |    0.11.2    |\n|    21.7.3    |    20.9.0    |    0.12.3    |    0.11.1    |\n|    21.7.2    |   18.20.4    |    0.12.2    |    0.11.0    |\n|    21.7.1    |   18.20.3    |    0.12.1    |    0.9.12    |\n|    21.7.0    |   18.20.2    |    0.12.0    |    0.9.11    |\n|    21.6.2    |   18.20.1    |   0.10.48    |    0.9.10    |\n\nThis is a partial list. For a complete list, visit https://nodejs.org/en/download/releases\n\n\n\n其中 LTS 代表 Long-term Support，表示这些版本是可以长期稳定运行的。显然你应该从这一列选。我暂时见过的用到 Node.js 的应用对版本的要求要么是 &gt;=18.0.0，要么就是&lt;=18.0.0, &gt;=20.0.0，所以选择 20 以上的比较靠谱。\n假如你选择了 22.11.0\nnvm install 22.11.0\n\n在不同版本之间切换\nnvm use 20.12.2\n换回来\nnvm use 22.11.0\n\n\n\n\n\n\n\n\n如果 nvm use 出现乱码或有其他故障\n\n\n\n请检查「以管理员身份运行」这一步，它非常重要\n\n\nNVM 已经帮你配好了环境变量，所以不需要再手动操作其他内容，这样装好了就行\n\n\n\n3.2.2 安装 JupyterLab Desktop\n在 GitHub Releases 下载最新版的 exe 格式文件点开安装\n\n\n3.2.3 设置 JupyterLab Desktop\n窗口标题栏会显示当前使用的 conda 环境，点击可以切换；\n标题栏 Menu 的 Settings 当中也可以换环境。\n\n3.2.3.1 切换成中文显示\n网页内容可以切换成中文，但 JupyterLab Desktop 这个 App 本身的不可以。\n退出 App；\n打开 Miniforge Prompt，激活刚才你使用的环境\npip install jupyterlab-language-pack-zh-CN\n再打开 App，在网页的 Settings－Language 选中 Chinese (Simplified, China) - 中文 (简体, 中国)"
  },
  {
    "objectID": "posts/jupyter-stata/index.html#sec-vscode",
    "href": "posts/jupyter-stata/index.html#sec-vscode",
    "title": "Jupyter + Stata 配置方法",
    "section": "4 VS Code 方案",
    "text": "4 VS Code 方案"
  },
  {
    "objectID": "posts/jupyter-stata/index.html#sec-appendix",
    "href": "posts/jupyter-stata/index.html#sec-appendix",
    "title": "Jupyter + Stata 配置方法",
    "section": "5 附录",
    "text": "5 附录\nnbstata 用户指南\nJupyerLab Desktop 用户指南\nInstall nvm-windows, node.js, and npm"
  }
]